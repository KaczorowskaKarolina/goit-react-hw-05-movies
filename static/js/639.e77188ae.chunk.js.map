{"version":3,"file":"static/js/639.e77188ae.chunk.js","mappings":"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","sources":["components/atoms/Cast.jsx","components/molecules/MovieDetails.jsx","components/molecules/Reviews.jsx","components/pages/Trending.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst Cast = ({ apiKey, movieId }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`\n        );\n        if (!response.ok) {\n          throw new Error('Failed to fetch cast details');\n        }\n\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.error('Error fetching cast details:', error.message);\n      }\n    };\n\n    fetchCast();\n  }, [movieId, apiKey]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {cast.map((member) => (\n        <div key={member.id}>{member.name}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;","import React, { useEffect, useState } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './movieDetails.css';\nimport Cast from '../atoms/Cast';\nimport Reviews from './Reviews';\n\nconst MovieDetails = ({ apiKey, baseImageUrl }) => {\n  const { movieId, prevPath } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [isCastVisible, setIsCastVisible] = useState(false);\n  const [isReviewsVisible, setIsReviewsVisible] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`\n        );\n\n        if (response.status === 200) {\n          setMovieDetails(response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching movie details:', error.message);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [apiKey, movieId]);\n\n  const toggleCastVisibility = () => {\n    setIsCastVisible(!isCastVisible);\n  };\n\n  const toggleReviewsVisibility = () => {\n    setIsReviewsVisible(!isReviewsVisible);\n  };\n\n  const goBack = () => {\n    navigate(prevPath || '/movies'); \n  };\n\n  return (\n    <div className=\"MovieDetails_container\">\n      {movieDetails ? (\n        <div className=\"MovieDetails_content\">\n          <h2 className=\"MovieDetails_h2\">\n            {movieDetails.title} ({movieDetails.release_date})\n          </h2>\n          <img\n            className=\"MovieDetails_img\"\n            src={`https://image.tmdb.org/t/p/w200${movieDetails.poster_path}`}\n            alt={movieDetails.title}\n          />\n\n          <p className=\"MovieDetails_title\">\n            <strong>Overview:</strong>\n          </p>\n          <p className=\"MovieDetails_overview\">{movieDetails.overview}</p>\n\n          <p className=\"MovieDetails_runtime\">Runtime: {movieDetails.runtime} min</p>\n          <p className=\"MovieDetails_info\">Additional information:</p>\n          <Link to=\"#\" onClick={toggleCastVisibility}>\n            Cast\n          </Link>\n          {isCastVisible && <Cast apiKey={apiKey} movieId={movieId} close={toggleCastVisibility} />}\n          <p></p>\n          <Link to=\"#\" onClick={toggleReviewsVisibility}>\n            Reviews\n          </Link>\n          {isReviewsVisible && (\n            <Reviews apiKey={apiKey} movieId={movieId} close={toggleReviewsVisibility} />\n          )}\n<p>\n          <button className=\"MovieDetails_goBack\" onClick={goBack}>\n            Go Back\n            </button>\n            </p>\n        </div>\n      ) : (\n        <div className=\"MovieDetails_loading\">Loading...</div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst Reviews = ({ apiKey, movieId }) => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`\n        );\n\n        if (response.status !== 200) {\n          throw new Error('Failed to fetch reviews');\n        }\n\n        setReviews(response.data.results);\n      } catch (error) {\n        console.error('Error fetching reviews:', error.message);\n      }\n    };\n\n    fetchReviews();\n  }, [apiKey, movieId]);\n\n  return (\n    <div>\n      <h3>Reviews</h3>\n      {reviews && reviews.length > 0 ? (\n        <ul>\n          {reviews.map((review) => (\n            <li key={review.id}>\n              <p>{review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport MovieDetails from '../molecules/MovieDetails';\n\nconst Trending = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      try {\n        const response = await axios.get(\n          'https://api.themoviedb.org/3/trending/movie/week?api_key=apiKey'\n        );\n\n        if (response.status === 200) {\n          setTrendingMovies(response.data.results);\n        }\n      } catch (error) {\n        console.error('Error fetching trending movies:', error.message);\n      }\n    };\n\n    fetchTrendingMovies();\n  }, []);\n\n  return (\n    <div>\n      {trendingMovies.map((movie) => (\n        <div key={movie.id}>\n          <MovieDetails apiKey={process.env.REACT_APP_API_KEY} movieId={movie.id} />\n          <img\n            src={`https://image.tmdb.org/t/p/w200`}\n            alt={movie.title}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Trending;\n"],"names":["_ref","apiKey","movieId","cast","setCast","useState","useEffect","async","response","fetch","concat","ok","Error","data","json","error","console","message","fetchCast","_jsxs","children","_jsx","map","member","name","id","baseImageUrl","prevPath","useParams","movieDetails","setMovieDetails","isCastVisible","setIsCastVisible","isReviewsVisible","setIsReviewsVisible","navigate","useNavigate","axios","status","fetchMovieDetails","toggleCastVisibility","toggleReviewsVisibility","className","title","release_date","src","poster_path","alt","overview","runtime","Link","to","onClick","Cast","close","Reviews","goBack","reviews","setReviews","results","fetchReviews","length","review","author","content","Trending","trendingMovies","setTrendingMovies","fetchTrendingMovies","movie","MovieDetails","process","REACT_APP_API_KEY"],"sourceRoot":""}