{"version":3,"file":"static/js/833.711ac818.chunk.js","mappings":"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","sources":["components/Cast.jsx","components/MovieDetails.jsx","components/Reviews.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst Cast = ({ apiKey, movieId }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`\n        );\n        if (!response.ok) {\n          throw new Error('Failed to fetch cast details');\n        }\n\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.error('Error fetching cast details:', error.message);\n      }\n    };\n\n    fetchCast();\n  }, [movieId, apiKey]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {cast.map((member) => (\n        <div key={member.id}>{member.name}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './movieDetails.css';\nimport Cast from './Cast'; // Import komponentu Cast\nimport Reviews from './Reviews'; // Import komponentu Reviews\n\nconst MovieDetails = ({ apiKey, baseImageUrl }) => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [isCastVisible, setIsCastVisible] = useState(false);\n  const [isReviewsVisible, setIsReviewsVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`\n        );\n\n        if (response.status === 200) {\n          setMovieDetails(response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching movie details:', error.message);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [apiKey, movieId]);\n\n  const toggleCastVisibility = () => {\n    setIsCastVisible(!isCastVisible);\n  };\n\n  const toggleReviewsVisibility = () => {\n    setIsReviewsVisible(!isReviewsVisible);\n  };\n\n  return (\n    <div className=\"MovieDetails_div\">\n      {movieDetails ? (\n        <div className=\"MovieDetails_content\">\n          <h2 className=\"MovieDetails_h2\">{movieDetails.title}</h2>\n          <img\n            className=\"MovieDetails_img\"\n            src={`https://image.tmdb.org/t/p/w200${movieDetails.poster_path}`}\n            alt={movieDetails.title}\n          />\n          <p className=\"MovieDetails_p\">{movieDetails.overview}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.tagline}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.video}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.vote_average}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.vote_count}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.status}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.runtime}</p>\n          <p className=\"MovieDetails_p\">{movieDetails.release_date}</p>\n          {/* Dodaj inne informacje o filmie, jeśli są potrzebne */}\n          \n          {/* Dodaj linki do Cast i Reviews */}\n          <Link to=\"#\" onClick={toggleCastVisibility}>Show Cast</Link>\n          {isCastVisible && <Cast apiKey={apiKey} movieId={movieId} close={toggleCastVisibility} />}\n\n          <Link to=\"#\" onClick={toggleReviewsVisibility}>Show Reviews</Link>\n          {isReviewsVisible && <Reviews apiKey={apiKey} movieId={movieId} close={toggleReviewsVisibility} />}\n        </div>\n      ) : (\n        <div className=\"MovieDetails_loading\">Loading...</div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst Reviews = ({ apiKey, movieId }) => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`\n        );\n\n        if (response.status !== 200) {\n          throw new Error('Failed to fetch reviews');\n        }\n\n        setReviews(response.data.results);\n      } catch (error) {\n        console.error('Error fetching reviews:', error.message);\n      }\n    };\n\n    fetchReviews();\n  }, [apiKey, movieId]);\n\n  return (\n    <div>\n      <h3>Reviews</h3>\n      {reviews && reviews.length > 0 ? (\n        <ul>\n          {reviews.map((review) => (\n            <li key={review.id}>\n              <p>{review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["_ref","apiKey","movieId","cast","setCast","useState","useEffect","async","response","fetch","concat","ok","Error","data","json","error","console","message","fetchCast","_jsxs","children","_jsx","map","member","name","id","baseImageUrl","useParams","movieDetails","setMovieDetails","isCastVisible","setIsCastVisible","isReviewsVisible","setIsReviewsVisible","axios","status","fetchMovieDetails","toggleCastVisibility","toggleReviewsVisibility","className","title","src","poster_path","alt","overview","tagline","video","vote_average","vote_count","runtime","release_date","Link","to","onClick","Cast","close","Reviews","reviews","setReviews","results","fetchReviews","length","review","author","content"],"sourceRoot":""}